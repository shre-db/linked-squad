__module_name__ = "state_schema"

from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List, Literal, Union

# Define the possible actions the router_node can decide on
RouterAction = Literal[
    "INITIAL_WELCOME",         # For first interaction or when bot needs to re-introduce itself/options
    "AWAIT_URL",               # Bot is explicitly waiting for a LinkedIn URL
    "CALL_ANALYZE",            # Router wants to call the Profile Analyzer
    "CALL_REWRITE",            # Router wants to call the Content Rewriter
    "CALL_JOB_FIT",            # Router wants to call the Job Fit Evaluator
    "CALL_GUIDE",              # Router wants to call the Career Guide
    "PROCESS_AGENT_OUTPUT",    # Router needs to interpret and contextualize agent output
    "RESPOND_DIRECTLY",        # Router handles the response itself (e.g., general chat, error, clarification)
    "AWAIT_CONFIRMATION",      # Router is waiting for a 'yes/no' from the user
    "REQUEST_JOB_DESCRIPTION", # Router is waiting for a job description
    "INVALID_INPUT"            # Router determined input was unparsable/unactionable
]

# Define agent types for better type safety
AgentType = Literal["analyze", "rewrite", "job_fit", "guide"]

class ProfileBotState(BaseModel):
    """
    Represents the state of our LangGraph workflow for LinkedIn optimization and career guidance.
    This state is passed between all nodes and updated accordingly.                                                                                                                                                          
    """                                                                                                                                                                                                                      # MY SUMMARY OF STATES
    # 1. User Input & Conversational Context                                                                                                                                                                                 # --------------------
    session_id: Optional[str] = Field(None, description="Unique identifier for the user's session.")                                                                                                                         # none                                                                                                                
    user_input: Optional[str] = Field(None, description="The most recent raw input string from the user.")                                                                                                                   # router_node - state set manually in the function
    conversation_history: List[Dict[str, str]] = Field(                                                                                                                                                                      # router_node | process_agent_output_node - states set manually in the functions
        default_factory=list,
        description="Chronological list of messages between user and bot. Each dict: {'role': 'user'|'assistant', 'content': '...'}",
    )
    current_bot_response: Optional[str] = Field(None, description="The message generated by the bot to be sent to the user in the current turn.")                                                                            # all nodes access this state  - router_node and process_agent_output_node can use the LLM to set state, other nodes simply set hardcoded messages during errors or exceptions.
    
    # 1a. Dynamic Instructions & Context
    current_user_instructions: Optional[Dict[str, Any]] = Field(None, description="Structured instructions from the user for the current task, including summary, confidence, and raw data from LLM-based extraction.")      # all nodes access this state - router_node writes to this state (extracts instructions using LLMs, but sets manually), all other nodes reads this state for subsequent processes.
    conversation_context: Optional[str] = Field(None, description="Contextual information about the ongoing conversation to maintain continuity.")                                                                           # all nodes access this state - router_node writes to this state (set manually), all other nodes reads this state for subsequent processes.
    user_preferences: Dict[str, Any] = Field(default_factory=dict, description="User preferences learned from conversation (tone, style, focus areas).")                                                                     # Currently not used by any nodes - We need to use this appropriately

    # 2. Raw Inputs from User
    linkedin_url: Optional[str] = Field(None, description="The LinkedIn profile URL provided by the user.")                                                                                                                  # router_node - state set by the LLM
    target_job_description: Optional[str] = Field(None, description="The job description provided by the user for job fit evaluation.")                                                                                      # router_node | job_fit_node - router_node sets this programatically, job_fit_node reads this for its analysis.
    target_role: Optional[str] = Field(None, description="The specific role/industry the user is interested in for guidance/job fit.")                                                                                       # guide_node | rewrite_node - Currently these node only read. No nodes is setting this state in the first place. We need to inspect this state. Either has to be inferred from the JSON file, provided job description, or the LLM should ask the user explicitly.
    linkedin_data: Optional[Dict[str, Any]] = Field(None, description="Parsed LinkedIn profile data from scraping.")                                                                                                         # none - This is set programmatically after scraping the data/ loading from a file (e.g., JSON)

    # 3. Agent Outputs / Processed Data
    profile_analysis_report: Optional[str] = Field(None, description="Detailed analysis report from the Profile Analyzer in markdown format.")                                                          # analyze_node | rewrite_node | job_fit_node | guide_node: The first one sets it, others read it for their respective tasks
    content_rewrites_suggestions: Optional[str] = Field(None, description="Content rewrite suggestions from Content Rewriter in markdown format.")                                                                            # rewrite_node - sets this state programmatically
    job_fit_evaluation_report: Optional[str] = Field(None, description="Job fit evaluation report in markdown format, including score, gaps, etc.")                                                 # job_fit_node - sets this state programmatically
    career_guidance_notes: Optional[str] = Field(None, description="Career guidance recommendations in markdown format.")                                                                               # guide_node - sets this state programmatically

    # 4. Control Flags & Workflow State
    current_router_action: Optional[RouterAction] = Field(None, description="The current action the router has decided upon (e.g., CALL_ANALYZE, RESPOND_DIRECTLY).")                                                         # router_node - state set by the LLM                                       
    last_agent_called: Optional[AgentType] = Field(None, description="Stores which specialized agent was last invoked. Useful for conversational context.")                                                                   # router_node - state set by the LLM
    pending_agent_output: Optional[Union[Dict[str, Any], str]] = Field(None, description="Raw output from specialized agent waiting for router processing. Can be JSON dict (routing) or markdown string (specialized agents).")                                                                              # analyze_node | rewrite_node | job_fit_node | guide_node | process_agent_output_node - First 4 writes programatically, last one reads for post-processing.
    needs_output_processing: bool = Field(False, description="Flag: True if agent output needs router interpretation before user response.")                                                                                  # analyze_node | rewrite_node | job_fit_node | guide_node | process_agent_output_node - All nodes sets the states programatically, first 4 sets True, last one sets False
    is_profile_analyzed: bool = Field(False, description="Flag: True if profile analysis has been successfully completed.")                                                                                                   # router_node - state set by the LLM
    awaiting_user_confirmation: bool = Field(False, description="Flag: True if the bot is waiting for a 'yes/no' or specific confirmation from the user.")                                                                    # router_node - state set by the LLM
    proposed_next_action: Optional[str] = Field(None, description="The action suggested by the bot (e.g., 'rewrite' after analysis) that needs user confirmation.")                                                           # router_node - state set by the LLM
    current_task_status: Optional[str] = Field(None, description="Brief status message about ongoing task (e.g., 'Analyzing profile...', 'Generating rewrites...').")                                                         # analyze_node | rewrite_node | job_fit_node | guide_node - These nodes sets the state with a brief message.
    awaiting_job_description: bool = Field(False, description="Flag: True if bot explicitly asked for a job description and is awaiting it.")                                                                                 # router_node - state set by the LLM
    
    # 4a. Completion Tracking & Re-execution Control
    analysis_completed: bool = Field(False, description="Flag: True if profile analysis has been completed at least once.")                                                                                                   # analyze_node | router_note - first node sets, the other one reads.
    rewrite_completed: bool = Field(False, description="Flag: True if content rewriting has been completed at least once.")                                                                                                   # rewrite_node | router_note - first node sets, the other one reads.
    job_fit_completed: bool = Field(False, description="Flag: True if job fit evaluation has been completed at least once.")                                                                                                  # job_fit_node | router_note - first node sets, the other one reads.
    guidance_completed: bool = Field(False, description="Flag: True if career guidance has been provided at least once.")                                                                                                     # guide_node - sets the state
    allow_re_execution: bool = Field(True, description="Flag: True if user wants to allow re-running of completed tasks. Set to False to prevent loops.")                                                                     # Currently not used by any nodes, neither any component uses this state!
    user_requested_update: bool = Field(False, description="Flag: True if user explicitly requested to update/redo a completed task.")                                                                                        # router_node | analyze_node | rewrite_node | job_fit_node | guide_node - router node sets state using the LLM, others set state = False programmatically.

    # 5. Error/Debugging Information
    error_message: Optional[str] = Field(None, description="Stores any error messages encountered during processing.")                                                                                                        # All nodes use this state
    debug_info: Dict[str, Any] = Field(default_factory=dict, description="Dictionary for storing various debug-related information.")                                                                                         # Currently not used by any nodes, neither any component uses this state!